---
description: 
globs: 
alwaysApply: true
---
# Billing System Architecture

## Bill Components
Bills in the system consist of:
- Room rental (base rent)
- Extra fees (additional charges)
- Electricity charges (consumption × rate)
- Water charges (fixed amount)

## Database Structure
The main billing tables are defined in [config/database.sql](mdc:config/database.sql):
- `bills` - Active bills
- `bill_history` - Archived bills
- `payments` - Active payments
- `payment_history` - Archived payments

## Key Files
- [app/api/bills/route.js](mdc:app/api/bills/route.js) - Main billing API
- [app/api/payments/route.js](mdc:app/api/payments/route.js) - Payment processing
- [lib/penaltyUtils.js](mdc:lib/penaltyUtils.js) - Penalty calculations
- [app/api/bills/reminders/route.js](mdc:app/api/bills/reminders/route.js) - Billing notifications
- [services/billingReminderService.js](mdc:services/billingReminderService.js) - Reminder system

## Billing Rules
1. Bills are manually generated by admin at the end of each tenant's billing cycle
2. System sends daily notifications 3 days before tenant's due date
3. Admin clicks "Generate Bill" and inputs:
   - Current electricity reading
   - Any additional fees
   - Bill details
4. Electricity is calculated using: consumption × rate_per_kwh
5. Water is a fixed monthly charge
6. Extra fees can be added for additional services/charges
7. Bill is sent to tenant after generation
8. Bills are archived to bill_history when fully paid
9. New bills cannot be generated if unpaid bills exist (except final bills)

## Financial Calculations
1. Total Income = Room Rental + Extra Fees
2. Total Expenses = Electricity + Water
3. Net Income = Total Income - Total Expenses
4. All monetary values must be parsed as floats before calculations
5. All totals must be rounded to 2 decimal places

## Payment Date System
1. Two-date system: payment_date (system processing) and actual_payment_date (when tenant paid)
2. All reports use actual_payment_date for accurate financial analysis
3. Admins can set custom payment dates for historical data entry
4. Perfect for dummy data creation and historical migration
5. UI provides visual feedback when custom dates are used






